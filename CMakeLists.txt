# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(vectorv2)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
	if(POLICY CMP0135)
		cmake_policy(SET CMP0135 NEW)
	endif()
	message(STATUS "Fetching vcpkg (2023.08.09)...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2023.08.09.tar.gz")
	FetchContent_GetProperties(vcpkg)
	if(NOT vcpkg_POPULATED)
		FetchContent_Populate(vcpkg)
		include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
	endif()
endif()

# Packages
find_package(glfw3 REQUIRED)

find_package(GLEW REQUIRED)

# Target: imgui
set(imgui_SOURCES
	"include/imgui/imgui.cpp"
	"include/imgui/imgui_demo.cpp"
	"include/imgui/imgui_draw.cpp"
	"include/imgui/imgui_tables.cpp"
	"include/imgui/imgui_widgets.cpp"
	"include/imgui/imconfig.h"
	"include/imgui/imgui.h"
	"include/imgui/imgui_internal.h"
	"include/imgui/imstb_rectpack.h"
	"include/imgui/imstb_textedit.h"
	"include/imgui/imstb_truetype.h"
	"include/imgui/backends/imgui_impl_glfw.cpp"
	"include/imgui/backends/imgui_impl_glfw.h"
	"include/imgui/backends/imgui_impl_opengl3.cpp"
	"include/imgui/backends/imgui_impl_opengl3.h"
	cmake.toml
)

add_library(imgui STATIC)

target_sources(imgui PRIVATE ${imgui_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${imgui_SOURCES})

target_compile_features(imgui PUBLIC
	cxx_std_11
)

target_include_directories(imgui PUBLIC
	"include/imgui"
)

target_link_libraries(imgui PUBLIC
	glfw
	GLEW::GLEW
)

# Target: imgui-knobs
set(imgui-knobs_SOURCES
	"include/knobs/imgui-knobs.h"
	"include/knobs/imgui-knobs.cpp"
	cmake.toml
)

add_library(imgui-knobs STATIC)

target_sources(imgui-knobs PRIVATE ${imgui-knobs_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${imgui-knobs_SOURCES})

target_compile_features(imgui-knobs PUBLIC
	cxx_std_11
)

target_include_directories(imgui-knobs PUBLIC
	"include/knobs"
)

# Target: vectorv2
set(vectorv2_SOURCES
	"src/main.cpp"
	cmake.toml
)

add_executable(vectorv2)

target_sources(vectorv2 PRIVATE ${vectorv2_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${vectorv2_SOURCES})

target_link_libraries(vectorv2 PRIVATE
	imgui
	imgui-knobs
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT vectorv2)
endif()

